openapi: 3.0.0
info:
  title: Nodemon API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.1.9
servers:
  - url: http://localhost:3000
    description: Optional server description, e.g. Main (production) server
  - url: http://localhost:3000
    description: Optional server description, e.g. Internal staging server for testing
paths:
  /api/products:
    get:
      summary: Returns a list of products.
      tags:
        - Products
      description: Returns a list of products, can be filtered by name, tag or price
      parameters:
      - name: skip   
        in: query
        schema:
          type: integer
        description: Number given to skip in order to paginate. By default 0, returns first page
      - name: limit
        in: query
        schema:
          type: integer
        description: The number of products to return in order to paginate. By default 10      
      - in: query
        name: name  
        required: false
        schema:
          type: string
        description: Filter by product name, it looks for a name that starts with the characters given example "Bic", you will get all products that starts with Bic
      - in: query
        name: tags
        required: false
        schema:
          type: string
        description: Filter by product tag, example (tags=motor lifestyle) each tag must be separeted by commas ,
      - in: query
        name: min_price  
        required: false
        schema:
          type: integer
        description: Filter by product minimun price 
      - in: query
        name: max_price  
        required: false
        schema:
          type: integer
        description: Filter by product maximun price
      - in: query
        name: type  
        required: false
        schema:
          type: string
          enum:
            - busqueda
            - venta
        description: Get the list with products on sale or products that people are looking for.
      - in: query
        name: sort  
        required: false
        schema:
          type: string
        description: Set the order of the list, put field name to order by it example "sort=name". If you use - character you get the list in desc order example "sort=-name"
      
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
        '400':    
          description: `page`  + `num_productos_per_page` are required

  /api/products/new:
    post:
      summary: Create a new product.
      tags:
        - Products
      consumes:
        - application/json
      requestBody:
        description: Product
        required: true
        content: 
          application/json:
            schema:
              summary: An example of Product
              type: object
              required:
                - name
                - price
                - sale
                - picture
              properties:
                name:
                  type: string
                price:
                  type: number
                sale:
                  type: boolean
                picture:
                  type: string
                tags:
                  type: array    
                  items:
                    type:string
                  uniqueItems: true
              example:
                name: "Rain Boots"
                price: 35
                sale: false
                picture: "./images/rain-boots.jpeg"
                tags: ["lifestyle","fashion"]            
      responses:
        '201':    # status code
          description: Product Created

  /api/products/{id}/update:
    put:
      summary: Update the product given.
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          description: The product ID
      requestBody:
        description: Product to be updated, can be all the fields, two or one. Whatever it is wanted. Example {"name":"nueva Bici"} {"name:"nuevaBici", price:32}
        required: true        
        content:
          application/json:
            schema:
              summary: An example of Product
              type: object              
              properties:
                name:
                  type: string
                price:
                  type: number
                sale:
                  type: boolean
                picture:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                  uniqueItems: true
              example:
                name: "Nueva Bici"
                price: 48
                sale: false
                picture: "./images/Bicicleta.jpeg"
                tags: ["lifestyle", "motor"]
      responses:
        '200':    # status code
          description: Product Updated

  /api/products/{id}/delete:
    delete:
      summary: Delete the product given.
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          description: The product ID
      responses:
        '200':    # status code
          description: Product Deleted

  /api/tags:
    get:
      summary: Returns a list of tags.
      tags:
        - Tags
      description: Returns a list of products tags
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
components:
  schemas:
    Products:
      properties:
        name:
          type: string
        status:
          type: boolean
        price:
          type: number
        picture:
          type: string
        tags:
          type: array
          items:
            type: string
      # Both properties are required
      required:  
        - name
        - status
        - price
        - picture
    Tags:
      properties:
        name:
          type: string        
      required:  
        - name
        


            